{% set name = "Unidecode" %}
{% set version = "1.3.8" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: cfdb349d46ed3873ece4586b96aa75258726e2fa8ec21d6f00a591d98806c2f4
  patches:
    - patches/0001-change-encoding.patch

build:
  number: 0
  script: {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation
  skip: True  # [py<35]
  entry_points:
    - unidecode = unidecode.util:main

requirements:
  build:
    - patch     # [not win]
    - m2-patch  # [win]
  host:
    - python
    - pip
    - setuptools
    - wheel
  run:
    - python

test:
  source_files:
    - tests
  imports:
    - unidecode
  requires:
    - pip
    - pytest
  commands:
    - pip check
    - unidecode --help
    - pytest tests -v

about:
  home: https://pypi.org/project/Unidecode/
  license: GPL-2.0-or-later
  license_file: LICENSE
  license_family: GPL
  summary: ASCII transliterations of Unicode text
  description: |
    It often happens that you have text data in Unicode, but you need to represent it in ASCII. For example when integrating with legacy code that doesn't support Unicode, or for ease of entry of non-Roman names on a US keyboard, or when constructing ASCII machine identifiers from human-readable Unicode strings that should still be somewhat intelligible. A popular example of this is when making an URL slug from an article title.
  dev_url: https://github.com/avian2/unidecode/
  doc_url: https://github.com/avian2/unidecode/blob/master/README.rst

extra:
  recipe-maintainers:
    - avian2
